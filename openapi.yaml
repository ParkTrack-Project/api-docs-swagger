openapi: 3.0.3
info:
  title: ParkTrack API
  version: "v0.0"
  description: |
    Полезные ссылки:
    
    [Основная документация API](https://parktrack-docs.nawinds.dev/docs/api)
    
    [Редактировать эту Swagger документацию](https://github.com/ParkTrack-Project/api-docs-swagger/blob/main/openapi.yaml)
    
    [Редактор OpenAPI от Swagger](https://editor.swagger.io/)
    
    [GitHub организация](https://github.com/parktrack-project)

    ---
    
    **Base address:** `https://parktrack-api.nawinds.dev/`

    ## Авторизация
    
    Токен можно получить в Telegram чате нашей команды.
    
    ## Формат данных

    ### Время
    Время передается в UTC в строковом представлении в формате ISO 8601, с постфиксом `Z`.
    Например, `2025-10-08T09:12:00Z`.

    ### Опорные точки
    Для упрощения рендеринга парковочных зон, порядок выбора 4 опорных точек записывается Labeler
    при разметке. Пользователю должно показываться сообщение, что отмечать точки нужно по часовой стрелке.
    Сохраненный порядок точек должен сохраняться при передаче данных, а также при хранении на сервере.

servers:
  - url: https://parktrack-api.nawinds.dev/

security:
  - bearerAuth: []

tags:
  - name: Auth
    description: v0 — System Token Only
  - name: Cameras
  - name: Parking Zones
  - name: Cars
  - name: System

paths:
  /cameras:
    get:
      tags:
        - Cameras
      summary: Получить список камер
      description: Возвращает список всех зарегистрированных камер. Используется для получения каталога камер и отображения их в интерфейсе `labeler`.
      parameters:
        - in: query
          name: q
          schema:
            type: string
          description: Фильтр по подстроке в `title`.
        - in: query
          name: top_left_corner_latitude
          schema:
            type: number
            format: double
            minimum: -90
            maximum: 90
          description: Широта левого верхнего угла окна просмотра камер (опционально).
        - in: query
          name: top_left_corner_longitude
          schema:
            type: number
            format: double
            minimum: -180
            maximum: 180
          description: Долгота левого верхнего угла окна просмотра камер (опционально).
        - in: query
          name: bottom_right_corner_latitude
          schema:
            type: number
            format: double
            minimum: -90
            maximum: 90
          description: Широта правого нижнего угла окна просмотра камер (опционально).
        - in: query
          name: bottom_right_corner_longitude
          schema:
            type: number
            format: double
            minimum: -180
            maximum: 180
          description: Долгота правого нижнего угла окна просмотра камер (опционально).
      responses:
        "200":
          description: Список объектов Camera.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Camera"
              examples:
                sample:
                  value:
                    - camera_id: 1
                      title: "Кронверкский просп., парковка напротив ИТМО"
                      latitude: 59.955976
                      longitude: 30.309426
                      created_at: "2025-10-08T09:12:00Z"
                      updated_at: "2025-10-08T09:12:00Z"
                    - camera_id: 2
                      title: "Ломоносова, 9 — двор"
                      latitude: 59.927366
                      longitude: 30.338487
                      created_at: "2025-10-08T09:15:00Z"
                      updated_at: "2025-10-08T09:15:00Z"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "422":
          description: Валидация не пройдена (например, координаты окна просмотра заданы некорректно).
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          $ref: "#/components/responses/InternalError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"

  /cameras/new:
    post:
      tags:
        - Cameras
      summary: Создать новую камеру
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateCameraRequest"
            examples:
              sample:
                value:
                  title: "Кронверкский просп., парковка напротив ИТМО"
                  latitude: 59.955976
                  longitude: 30.309426
      responses:
        "201":
          description: Числовой идентификатор созданной камеры.
          content:
            application/json:
              schema:
                type: object
                required:
                  - camera_id
                properties:
                  camera_id:
                    type: integer
                    example: 1
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "409":
          description: Камера с таким `title` уже существует.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "415":
          $ref: "#/components/responses/UnsupportedMediaType"
        "422":
          description: Валидация не пройдена (например, `title` пустой или слишком длинный).
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          $ref: "#/components/responses/InternalError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"

  /cameras/{camera_id}:
    get:
      tags:
        - Cameras
      summary: Получить информацию о камере
      parameters:
        - $ref: "#/components/parameters/CameraId"
      responses:
        "200":
          description: Объект Camera.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Camera"
              examples:
                sample:
                  value:
                    camera_id: 1
                    title: "Кронверкский просп., парковка напротив ИТМО"
                    latitude: 59.955976
                    longitude: 30.309426
                    created_at: "2025-10-08T08:00:00Z"
                    updated_at: "2025-10-08T08:10:00Z"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/InternalError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"
    put:
      tags:
        - Cameras
      summary: Обновить данные камеры (частично или полностью)
      parameters:
        - $ref: "#/components/parameters/CameraId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateCameraRequest"
      responses:
        "200":
          description: Объект Camera (актуальное состояние после обновления).
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Camera"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "409":
          description: Конфликт уникальности `title`.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "415":
          $ref: "#/components/responses/UnsupportedMediaType"
        "422":
          description: Валидация не пройдена (`title` пустой/слишком длинный; `latitude`/`longitude` вне диапазона).
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          $ref: "#/components/responses/InternalError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"
    delete:
      tags:
        - Cameras
      summary: Удалить камеру (и связанные данные)
      description: Удаляет камеру и **все связанные с ней парковочные зоны и данные** (при их наличии). Действие **необратимо**.
      parameters:
        - $ref: "#/components/parameters/CameraId"
      responses:
        "204":
          description: Камера успешно удалена (тело отсутствует).
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "409":
          description: Удаление невозможно из-за зависимостей (если каскадное удаление запрещено).
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          $ref: "#/components/responses/InternalError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"

  /zones:
    get:
      tags:
        - Parking Zones
      summary: Получить список парковочных зон
      description: Возвращает список всех парковочных зон.
      parameters:
        - in: query
          name: camera_id
          schema:
            type: integer
            minimum: 1
          description: Вернуть зоны только указанной камеры.
        - in: query
          name: min_free_count
          schema:
            type: integer
            minimum: 0
          description: Фильтр по минимальному количеству свободных мест в зоне.
        - in: query
          name: max_pay
          schema:
            type: integer
            minimum: 0
          description: Фильтр по максимальной цене парковки в зоне за час.
      responses:
        "200":
          description: Массив объектов Zone.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Zone"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "500":
          $ref: "#/components/responses/InternalError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"

  /zones/new:
    post:
      tags:
        - Parking Zones
      summary: Создать новую парковочную зону
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateZoneRequest"
            examples:
              sample:
                value:
                  camera_id: 1
                  zone_type: "parallel"
                  capacity: 7
                  pay: 0
                  points:
                    - latitude: 59.955976
                      longitude: 30.309426
                      x: 45
                      y: 23
                    - latitude: 59.956008
                      longitude: 30.309358
                      x: 87
                      y: 25
                    - latitude: 59.956231
                      longitude: 30.309979
                      x: 79
                      y: 149
                    - latitude: 59.956201
                      longitude: 30.310043
                      x: 32
                      y: 145
      responses:
        "201":
          description: ID созданной зоны.
          content:
            application/json:
              schema:
                type: object
                required:
                  - zone_id
                properties:
                  zone_id:
                    type: integer
                    example: 1
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          description: Камера с указанным `camera_id` не существует.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "415":
          $ref: "#/components/responses/UnsupportedMediaType"
        "422":
          description: Валидация не пройдена (диапазоны координат/ровно 4 точки/`capacity`/`pay`).
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          $ref: "#/components/responses/InternalError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"

  /zones/{zone_id}:
    get:
      tags:
        - Parking Zones
      summary: Получить данные о конкретной зоне
      parameters:
        - $ref: "#/components/parameters/ZoneId"
      responses:
        "200":
          description: Объект Zone.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Zone"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/InternalError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"
    put:
      tags:
        - Parking Zones
      summary: Обновить данные парковочной зоны (частично или полностью)
      parameters:
        - $ref: "#/components/parameters/ZoneId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateZoneRequest"
      responses:
        "200":
          description: Объект Zone после обновления.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Zone"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          description: "`zone_id` не существует, либо (при смене `camera_id`) указанная камера не найдена."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "415":
          $ref: "#/components/responses/UnsupportedMediaType"
        "422":
          description: Валидация не пройдена (`capacity`/`occupied`/`confidence`/`points`/диапазоны координат).
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          $ref: "#/components/responses/InternalError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"
    delete:
      tags:
        - Parking Zones
      summary: Удалить парковочную зону
      parameters:
        - $ref: "#/components/parameters/ZoneId"
      responses:
        "204":
          description: Зона успешно удалена (тело отсутствует).
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "409":
          description: Удаление невозможно (конфликт).
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          $ref: "#/components/responses/InternalError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"

  /cars:
    post:
      tags:
        - Cars
      summary: Принять результаты детекции автомобилей
      description: Принимает результаты детекции автомобилей с конкретной камеры.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PostCarsRequest"
            examples:
              sample:
                value:
                  camera_id: 1
                  detection_timestamp: "2025-10-08T09:12:00Z"
                  cars:
                    - confidence: 0.89
                      points:
                        - - 23
                          - 28
                        - - 87
                          - 28
                        - - 87
                          - 42
                        - - 23
                          - 42
                    - confidence: 0.91
                      points:
                        - - 28
                          - 33
                        - - 92
                          - 33
                        - - 92
                          - 47
                        - - 28
                          - 47
      responses:
        "202":
          description: Принято к обработке.
          content:
            application/json:
              schema:
                type: object
                required:
                  - status
                properties:
                  status:
                    type: string
                    example: accepted
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          description: Камера с указанным `camera_id` не существует.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "415":
          $ref: "#/components/responses/UnsupportedMediaType"
        "422":
          description: |
            Валидация не пройдена: `confidence` вне диапазона `0..1`; `points` не 4 вершины; вершины не пары чисел; вырожденный прямоугольник; `detection_timestamp` не в ISO 8601 UTC (с постфиксом `Z`) или слишком сильно расходится с серверным временем.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          $ref: "#/components/responses/InternalError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"
    get:
      tags:
        - Cars
      summary: Long polling для получения обновлений детекций
      description: |
        Long polling для получения **обновлений детекций** по камерам.

        За один ответ сервер возвращает данные детекций **только по одной камере**, даже если они доступны по нескольким.
        В случае, когда данные есть по нескольким камерам, возвращаются данные по камере с самым ранним временем детекции.

        На одну камеру должно быть не более 1 одновременного long polling запроса.
      parameters:
        - in: query
          name: since
          schema:
            type: string
            format: date-time
          description: Вернуть события новее указанного времени (UTC, ISO 8601).
        - in: query
          name: timeout
          schema:
            type: integer
            minimum: 1
            maximum: 60
            default: 30
          description: Сколько секунд держать соединение открытым, если новых данных нет.
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
          description: Максимальное число событий/пакетов в ответе.
      responses:
        "200":
          description: Пакет обновлений по одной камере.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CarsLongPollResponse"
              examples:
                sample:
                  value:
                    camera_id: 1
                    since: "2025-10-08T09:12:00Z"
                    next_since: "2025-10-08T09:12:30Z"
                    cars:
                      - confidence: 0.89
                        points:
                          - - 23
                            - 28
                          - - 87
                            - 28
                          - - 87
                            - 42
                          - - 23
                            - 42
                      - confidence: 0.91
                        points:
                          - - 28
                            - 33
                          - - 92
                            - 33
                          - - 92
                            - 47
                          - - 28
                            - 47
        "204":
          description: При отсутствии новых данных.
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "408":
          description: Клиент оборвал соединение/истёк таймаут на стороне прокси.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "422":
          description: Невалидный `since` (не ISO 8601) или конфликт параметров.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          $ref: "#/components/responses/InternalError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"

  /health:
    get:
      tags:
        - System
      summary: Health check
      security: []
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                required:
                  - status
                properties:
                  status:
                    type: string
                    example: healthy
        "500":
          $ref: "#/components/responses/InternalError"

  /version:
    get:
      tags:
        - System
      summary: Версия API
      security: []
      responses:
        "200":
          description: Текущая версия API.
          content:
            application/json:
              schema:
                type: object
                required:
                  - api
                properties:
                  api_version:
                    type: string
                    example: v0.0
        "500":
          $ref: "#/components/responses/InternalError"

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  parameters:
    CameraId:
      in: path
      name: camera_id
      required: true
      schema:
        type: integer
        minimum: 1
      description: Идентификатор камеры.
    ZoneId:
      in: path
      name: zone_id
      required: true
      schema:
        type: integer
        minimum: 1
      description: Идентификатор зоны.

  responses:
    UnauthorizedError:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
      description:
            "Отсутствует или просрочен токен. Укажи `Authorization: Bearer <token>`."
    NotFoundError:
      description: Ресурс не найден.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    UnsupportedMediaType:
      description: Неверный `Content-Type`. Используй `application/json`.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          examples:
            sample:
              value:
                error_description: "Unsupported Media Type: expected application/json"
    InternalError:
      description: Необработанная ошибка сервера.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    ServiceUnavailable:
      description: Сервис временно недоступен/перезапускается.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"

  schemas:
    Error:
      type: object
      required:
        - error_description
      properties:
        error_description:
          type: string
          example: "Validation error: поле X обязательно"

    Camera:
      type: object
      description: Модель Camera.
      required:
        - camera_id
        - title
        - latitude
        - longitude
        - created_at
        - updated_at
      properties:
        camera_id:
          type: integer
          example: 1
        title:
          type: string
          example: "Кронверкский просп., парковка напротив ИТМО"
        latitude:
          type: number
          format: double
          minimum: -90
          maximum: 90
          example: 59.955976
        longitude:
          type: number
          format: double
          minimum: -180
          maximum: 180
          example: 30.309426
        created_at:
          type: string
          format: date-time
          example: "2025-10-08T08:00:00Z"
        updated_at:
          type: string
          format: date-time
          example: "2025-10-08T08:10:00Z"

    CreateCameraRequest:
      type: object
      description: |
        **Request body (required)**
        - **title** (`string`, 1..200)
        - **latitude** (`float`, `-90..90`)
        - **longitude** (`float`, `-180..180`)
      required:
        - title
        - latitude
        - longitude
      properties:
        title:
          type: string
          minLength: 1
          maxLength: 200
        latitude:
          type: number
          format: double
          minimum: -90
          maximum: 90
        longitude:
          type: number
          format: double
          minimum: -180
          maximum: 180

    UpdateCameraRequest:
      type: object
      additionalProperties: false
      description: Любые из полей ниже; минимум одно поле.
      properties:
        title:
          type: string
          minLength: 1
          maxLength: 200
        latitude:
          type: number
          format: double
          minimum: -90
          maximum: 90
        longitude:
          type: number
          format: double
          minimum: -180
          maximum: 180

    ZonePoint:
      type: object
      description: Опорная точка зоны (карта + пиксели изображения), по часовой стрелке.
      required:
        - latitude
        - longitude
        - x
        - y
      properties:
        latitude:
          type: number
          format: double
          minimum: -90
          maximum: 90
        longitude:
          type: number
          format: double
          minimum: -180
          maximum: 180
        x:
          type: number
          format: double
          minimum: 0
        y:
          type: number
          format: double
          minimum: 0

    Zone:
      type: object
      description: Объект зоны в ответах API.
      required:
        - zone_id
        - camera_id
        - zone_type
        - capacity
        - pay
        - points
        - created_at
        - updated_at
      properties:
        zone_id:
          type: integer
          example: 1
        camera_id:
          type: integer
          example: 1
        zone_type:
          type: string
          enum:
            - parallel
            - standard
          example: parallel
        capacity:
          type: integer
          minimum: 0
          example: 7
        occupied:
          type: integer
          minimum: 0
          example: 5
        confidence:
          type: number
          format: double
          minimum: 0
          maximum: 1
          example: 0.76
        pay:
          type: integer
          minimum: 0
          example: 0
        points:
          type: array
          minItems: 4
          maxItems: 4
          items:
            $ref: "#/components/schemas/ZonePoint"
        created_at:
          type: string
          format: date-time
          example: "2025-10-08T08:00:00Z"
        updated_at:
          type: string
          format: date-time
          example: "2025-10-08T08:10:00Z"

    CreateZoneRequest:
      type: object
      description: |
        Ровно 4 точки. Координаты широты/долготы в допустимых диапазонах.
        `capacity >= 0`, `pay >= 0`. Для `points` порядок по часовой стрелке.
      required:
        - camera_id
        - zone_type
        - capacity
        - pay
        - points
      properties:
        camera_id:
          type: integer
          minimum: 1
        zone_type:
          type: string
          enum:
            - parallel
            - standard
        capacity:
          type: integer
          minimum: 0
        pay:
          type: integer
          minimum: 0
        points:
          type: array
          minItems: 4
          maxItems: 4
          items:
            $ref: "#/components/schemas/ZonePoint"

    UpdateZoneRequest:
      type: object
      additionalProperties: false
      description: Любое подмножество полей; минимум одно.
      properties:
        camera_id:
          type: integer
          minimum: 1
        zone_type:
          type: string
          enum:
            - parallel
            - standard
        capacity:
          type: integer
          minimum: 0
        pay:
          type: integer
          minimum: 0
        occupied:
          type: integer
          minimum: 0
        confidence:
          type: number
          format: double
          minimum: 0
          maximum: 1
        points:
          type: array
          minItems: 4
          maxItems: 4
          items:
            $ref: "#/components/schemas/ZonePoint"

    CarDetection:
      type: object
      description: Элемент в массиве `cars`.
      required:
        - confidence
        - points
      properties:
        confidence:
          type: number
          format: double
          minimum: 0
          maximum: 1
          example: 0.89
        points:
          type: array
          minItems: 4
          maxItems: 4
          items:
            type: array
            minItems: 2
            maxItems: 2
            items:
              type: number
              format: double
          example:
            - - 23
              - 28
            - - 87
              - 28
            - - 87
              - 42
            - - 23
              - 42

    PostCarsRequest:
      type: object
      description: Принимает результаты детекции автомобилей с конкретной камеры за один кадр.
      required:
        - camera_id
        - detection_timestamp
        - cars
      properties:
        camera_id:
          type: integer
          minimum: 1
        detection_timestamp:
          type: string
          format: date-time
          example: "2025-10-08T09:12:00Z"
        cars:
          type: array
          description: Список всех детекций по камере за данный кадр (допускается пустой список).
          items:
            $ref: "#/components/schemas/CarDetection"

    CarsLongPollResponse:
      type: object
      description: Пакет обновлений детекций по одной камере.
      required:
        - camera_id
        - since
        - next_since
        - cars
      properties:
        camera_id:
          type: integer
          example: 1
        since:
          type: string
          format: date-time
          example: "2025-10-08T09:12:00Z"
        next_since:
          type: string
          format: date-time
          example: "2025-10-08T09:12:30Z"
        cars:
          type: array
          items:
            $ref: "#/components/schemas/CarDetection"
